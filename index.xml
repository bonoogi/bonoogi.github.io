<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Hell yeah, World</title><link>https://bonoogi.github.io/</link><description>Recent content on Hell yeah, World</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Mar 2022 22:57:09 +0900</lastBuildDate><atom:link href="https://bonoogi.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>[Swift] Combine의 Backpressure 처리</title><link>https://bonoogi.github.io/posts/2022-03-06-combine-backpressure/</link><pubDate>Sun, 06 Mar 2022 22:57:09 +0900</pubDate><guid>https://bonoogi.github.io/posts/2022-03-06-combine-backpressure/</guid><description>배압이라고 부르는게 좋을까 Backpressure라고 부르는게 좋을까?</description></item><item><title>NSAttributedString을 AttributedString으로 변환하기</title><link>https://bonoogi.github.io/posts/2022-02-23-convert-nsattributedstring/</link><pubDate>Wed, 23 Feb 2022 23:17:37 +0900</pubDate><guid>https://bonoogi.github.io/posts/2022-02-23-convert-nsattributedstring/</guid><description>iOS 15에서 AttributedString이 추가되면서 일부 SDK 기능을 쓸 때 NSAttributedString 대신에 AttributedString을 사용해야할 때가 있는데, 이게 또 바로바로 호환이 되질 않는다. 아래와 같이 별도의 생성자를 통해 만들어줘야 한다.
let nsAttributedString = NSAttributedString(...) // UIKit 특성을 뽑아올 때 let attributedString = try AttributedString(nsAttributedString, including: \.uiKit) // SwiftUI 특성을 뽑아올 때 let attributedString = try AttributedString(nsAttributedString, including: \.swiftUI) // AppKit 특성을 뽑아올 때 let attributedString = try AttributedString(nsAttributedString, including: \.</description></item><item><title>[Swift] Combine 테스트 하기</title><link>https://bonoogi.github.io/posts/2022-02-20-testing-combine/</link><pubDate>Sun, 20 Feb 2022 23:19:41 +0900</pubDate><guid>https://bonoogi.github.io/posts/2022-02-20-testing-combine/</guid><description>TestScheduler 정도는 만들어줬으면 좋았을텐데</description></item><item><title>[Swift] Combine의 Scheduler 전환에 대해 알아보기</title><link>https://bonoogi.github.io/posts/2022-02-13-combine-schedulers/</link><pubDate>Sun, 13 Feb 2022 23:39:13 +0900</pubDate><guid>https://bonoogi.github.io/posts/2022-02-13-combine-schedulers/</guid><description>Customize handling of asynchronous events by combining event-processing operators.
Swift Combine 프레임워크는 위의 인용구에 나와있다시피 비동기 작업을 용이하게 처리하기 위한 프레임워크로, Reactive Extension과 같은 라이브러리를 거의 완전히 대체할 수 있다(애시당초 대체하라고 나왔다고 볼 수 있다). Combine이나 Reacive Extension과 같은 형태를 일반적으로 Reactive 혹은 반응형 프로그래밍이라고 부른다. 이게 명칭때문에 React나 반응형 웹 디자인과 개념을 헷갈려하는 사람이 종종 보이는데, 전혀 다른 개념이다.
여튼 이런 반응형 프로그래밍의 장점이자 특징이라고 한다면 바로 연산자 호출을 통한 작업 스레드 전환이다.</description></item><item><title>SwiftUI Preview 빌드가 너무 오래걸려서 써먹을수가 없을때</title><link>https://bonoogi.github.io/posts/2022-02-10-swiftui-preview-build/</link><pubDate>Thu, 10 Feb 2022 23:45:20 +0900</pubDate><guid>https://bonoogi.github.io/posts/2022-02-10-swiftui-preview-build/</guid><description>야 이게 무슨 408 Request Timeout이냐?</description></item></channel></rss>