<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hell yeah, World!</title>
  <subtitle></subtitle>
  <link href="https://bonoogi.ghost.io/feed.xml" rel="self"/>
  <link href="https://bonoogi.ghost.io"/>
  <updated>2020-12-20T21:05:40.000+09:00</updated>
  <id>https://bonoogi.ghost.io/</id>
  <author>
    <name>구본욱</name>
  </author>
  <entry>
    <title>[Swift] Codable로 JSON 좀 더 유연하게 써먹기</title>
    <link href="https://bonoogi.ghost.io/swift-codablero-json-irijeori-sseomeoggi/"/>
    <updated>2020-12-20T21:05:40.000+09:00</updated>
    <id>https://bonoogi.ghost.io/swift-codablero-json-irijeori-sseomeoggi/</id>
    <content type="html">&lt;!--kg-card-begin: markdown--&gt;&lt;p&gt;Swift는 &lt;a href=&quot;https://developer.apple.com/documentation/swift/codable&quot;&gt;Codable&lt;/a&gt; 덕분에 JSON 다루기가 퍽 편한 편이다. 하지만 JSON과 모델이 1:1로 대응하는게 아닌 약간 변칙적인 형태의 JSON을 다루게 되는 경우에는 Codable보다는 &lt;a href=&quot;https://github.com/SwiftyJSON/SwiftyJSON&quot;&gt;SwiftyJSON&lt;/a&gt;과 같은 라이브러리가 좀 더 편하다보니 &lt;em&gt;&#39;아 그냥 Codable 치우고 SwiftyJSON 쓸까?&#39;&lt;/em&gt; 싶을때가 종종 있다. 특히 JSON Object가 중첩된 상태이거나, 평평하게 펴진 JSON Object를 중첩된 형태의 모델로 만들거나 해야할 때는 직접 JSON에 대한 Key에 접근해서 값을 대입해주는게 문제 상황에 대처하기 쉽기 때문에 직관적으로 구현하기에는 JSON에 Dictionary 형태로 접근할 수 있는 SwiftyJSON이 훨씬 편하다(아니면 진짜로 JSON을 Dictionary 형태로 만들어버리던가...). 하지만 기왕이면 Codable을 써서 해결하는게 좀 더 편하지 않을까? 그런 측면에서 두가지 경우에 대한 Codable 사용 팁을 준비해봤다.&lt;/p&gt;
&lt;h2 id=&quot;flatjsonobjectnestedmodel&quot;&gt;Flat JSON Object → Nested Model&lt;/h2&gt;
&lt;p&gt;일단 다음의 두 JSON Object를 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// 주소 정보에 대한 JSON Object
{
    &amp;quot;city&amp;quot;: &amp;quot;솔라특별시&amp;quot;,
    &amp;quot;zipcode&amp;quot;: &amp;quot;00000&amp;quot;
}

// 주소 정보를 포함하는 사람 정보 JSON Object
{
    &amp;quot;name&amp;quot;: &amp;quot;구구리&amp;quot;,
    &amp;quot;city&amp;quot;: &amp;quot;솔라특별시&amp;quot;,
    &amp;quot;zipcode&amp;quot;: &amp;quot;00000&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위와 같은 경우에 1:1로 대응하는 모델로 구조체를 구현하면 다음과 같은 형태로 만들게 된다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct 주소: Codable {
    let city: String
    let zipcode: String
}

struct 사람: Codable {
    let name: String
    let city: String
    let zipcode: String
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아니 근데, 이거 뭔가 굉장히 불합리하고 맘에 들지 않은 구현이지 않은가? 사람 구조체 안에 &lt;code&gt;city&lt;/code&gt;, &lt;code&gt;zipcode&lt;/code&gt; 대신 &lt;code&gt;let address: 주소&lt;/code&gt; 프로퍼티를 넣어주고 싶지 않은가? 다음처럼 말이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct 사람: Codable {
    let name: String
    let address: 주소
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다행히 아주 간단하게 해결할 수 있는 방법이 있다. 바로 &lt;a href=&quot;https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer&quot;&gt;SingleValueDecodingContainer&lt;/a&gt;를 이용하는 것이다. SingleValueDecodingContainer는 간단하게 얘기하자면 키가 지정되지 않은 값에 대해 직접 디코딩을 해주는 컨테이너라고 할 수 있다. 바로 이 컨테이너가 JSON Object로부터 &lt;code&gt;address&lt;/code&gt;를 디코딩할 수 있도록 해주는 것이다. 실 적용 코드는 다음과 같다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct 사람: Codable {
    let name: String
    let address: 주소
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.name = try container.decode(String.self, forKey: .name)
        // Decoder로부터 SingleValueDecodingContainer를 받아와 `주소`를 디코딩한다.
        self.address = try decoder.singleValueContainer().decode(주소.self)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;문제 해결! 이라고 외치고 싶지만, 아직 남은 문제가 있다. 우리가 지금 준수하는 프로토콜은 Codable이기 때문에 Encodable에도 대응해야 하는데, 이대로는 원래의 JSON 형태로 인코딩되지 않고 중첩된 형태의 JSON으로 인코딩된다. 물론 디코딩만 할거면 아무래도 상관없는 문제인데, 기왕 Codable을 쓰는 것이니 Encodable까지 만족시켜보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct 사람: Codable {
    // ...
    
    enum CodingKeys: CodingKey {
        case name
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(CodingKeys.self)
        try container.encode(name, forKey: .name)
        try address.encode(to: encoder)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;encode(to encoder:)&lt;/code&gt;를 직접 구현할 경우, CodingKeys를 명시적으로 구현해두지 않으면 빌드 오류가 난다. 그러니 일단 우리가 직접 사용하는 키인 &lt;code&gt;name&lt;/code&gt;만 선언해두고, &lt;code&gt;address&lt;/code&gt; 프로퍼티가 Codable을 준수하고 있으니 &lt;code&gt;encode(to encoder:)&lt;/code&gt; 함수를 호출해주면 끝이다. CodingKeys를 따로 구현하는게 귀찮긴 하지만, 또 그렇게까지 어려운 방법은 아니다. 하지만 정 귀찮고 필요없다면 Decodable만 구현하도록 하자. 자, 이제 다음은 그 반대의 상황이다.&lt;/p&gt;
&lt;h2 id=&quot;nestedjsonobjectflatmodel&quot;&gt;Nested JSON Object → Flat Model&lt;/h2&gt;
&lt;p&gt;이번에는 JSON이 우리가 다음과 같이 중첩된 형태로 온다고 생각해보자. 바로 위의 경우에서였다면 추가 구현 필요없이 그대로 적용할 수 있었을 것이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;구구리&amp;quot;,
    &amp;quot;address&amp;quot;: {
        &amp;quot;city&amp;quot;: &amp;quot;솔라특별시&amp;quot;,
        &amp;quot;zipcode&amp;quot;: &amp;quot;00000&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아 그런데 알고보니 이를 위해 만들었던 &lt;code&gt;주소&lt;/code&gt; 모델이 &lt;code&gt;사람&lt;/code&gt; 외의 곳에서는 쓸 곳이 없단다. 외려 이것보다 더 복잡한 형태의 &lt;code&gt;주소&lt;/code&gt; 모델을 따로 만들고 저 JSON Object의 &lt;code&gt;address&lt;/code&gt;는 &lt;code&gt;사람&lt;/code&gt; 모델 안에 넣는게 더 나은 상황이다. 이런 상황을 위해 &lt;a href=&quot;https://developer.apple.com/documentation/swift/keyeddecodingcontainer/2893204-nestedcontainer&quot;&gt;중첩된 상태를 위한 컨테이너&lt;/a&gt;를 가져올 수 있다. 이번애는 Encodable 구현까지 한번에 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-swift&quot;&gt;struct 사람: Codable {
    let name: String
    let city: String
    let zipcode: String
    
    enum CodingKeys: CodingKey {
        case name
        case city
        case zipcode
        // 중첩된 JSON Object에 접근하기 위한 키
        case address
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.name = try container.decode(String.self, forKey: .name)
        
        // address 키 안의 JSON Object에 대한 컨테이너를 가져온다.
        let addressContainer = try container.nestedContainer(keyedBy: CodingKeys.self, forKey: .address)
        self.city = try addressContainer.decode(String.self, forKey: .city)
        self.zipcode = try addressContainer.decode(String.self, forKey: .zipcode)
    }
    
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        
        var addressContainer = container.nestedContainer(keyedBy: CodingKeys.self, forKey: .address)
        try addressContainer.encode(city, forKey: .city)
        try addressContainer.encode(zipcode, forKey: .zipcode)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;근데 사실 이것도 굉장히 귀찮은 건 사실이기 때문에 상황에 따라 Decodable만 구현해도 된다면 그렇게 하도록 하자...&lt;/p&gt;
&lt;!--kg-card-end: markdown--&gt;</content>
  </entry>
  <entry>
    <title>git submodule로 프로젝트마다 공통 파일 추가하기</title>
    <link href="https://bonoogi.ghost.io/git-submodulero-peurojegteumada-gongtong-pail-cugahagi/"/>
    <updated>2020-12-11T01:02:51.000+09:00</updated>
    <id>https://bonoogi.ghost.io/git-submodulero-peurojegteumada-gongtong-pail-cugahagi/</id>
    <content type="html">&lt;p&gt;서로 분리된 프로젝트 A, B, C가 있고, 각각의 프로젝트는 거의 동일한 환경설정 과정을 거치도록 되어있는 상황을 가정해보자. 그리고 이 환경설정을 실행하는 과정이 몇개의 쉘 스크립트 파일을 실행하는 것으로 완료할 수 있다면? 이 환경설정을 실행하는 스크립트 파일과 기타 공통 파일을 하나의 github 저장소(혹은 그 외 여러가지 원격 git 저장소)를 통해서 관리할 수 있지 않을까? 라는 질문에서 고민을 하다가 생각난 것이 바로 git submodule을 활용하는 것이다.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-bookmark-card&quot;&gt;&lt;a class=&quot;kg-bookmark-container&quot; href=&quot;https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-%EC%84%9C%EB%B8%8C%EB%AA%A8%EB%93%88&quot;&gt;&lt;div class=&quot;kg-bookmark-content&quot;&gt;&lt;div class=&quot;kg-bookmark-title&quot;&gt;Git - 서브모듈&lt;/div&gt;&lt;div class=&quot;kg-bookmark-description&quot;&gt;&lt;/div&gt;&lt;div class=&quot;kg-bookmark-metadata&quot;&gt;&lt;img class=&quot;kg-bookmark-icon&quot; src=&quot;https://git-scm.com/favicon.ico&quot;&gt;&lt;span class=&quot;kg-bookmark-publisher&quot;&gt;서브모듈&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kg-bookmark-thumbnail&quot;&gt;&lt;img src=&quot;https://git-scm.com/images/logo@2x.png&quot;&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;위의 링크 문서를 보면 git submodule이 무엇인지에 대해 알 수 있다. 간단한 정의만 좀 가져와보자면 다음과 같다.&lt;/p&gt;&lt;blockquote&gt;Git 저장소 안에 다른 Git 저장소를 디렉토리로 분리해 넣는 것이 서브모듈이다. 다른 독립된 Git 저장소를 Clone 해서 내 Git 저장소 안에 포함할 수 있으며 각 저장소의 커밋은 독립적으로 관리한다.&lt;/blockquote&gt;&lt;p&gt;어떤가, 딱 위 상황에 써먹기 좋은 기능이지 않은가?&lt;/p&gt;&lt;h3 id=&quot;1-&quot;&gt;1. 환경설정 저장소를 프로젝트 저장소에  붙여주기&lt;/h3&gt;&lt;p&gt;일단 환경설정을 위한 파일을 모아둔 저장소를 이미 만들었다고 생각하자. 이 저장소의 이름은 setup이라고 치자. 일단 이 setup 저장소에는 setup.sh 파일 하나만 들고 있다 치자. 파일 여러개를 상정해봤자 설명만 복잡해진다. 이 setup.sh 파일의 내용은 다음과 같다.&lt;/p&gt;&lt;!--kg-card-begin: markdown--&gt;&lt;pre&gt;&lt;code&gt;#!/bin/sh
set -ex

PROJECT_PATH={여기에 프로젝트 경로 입력}
something awesome setup command to &amp;quot;$PROJECT_PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자, 이제 이 저장소의 내용을 프로젝트 A의 저장소 내에 submodule로 붙여주자.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt; git submodule add setup-repository-url&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;이렇게 하면 git 작업 디렉토리 내에 서브모듈로 붙인 저장소의 이름으로 디렉토리가 만들어지고, 그 안에 서브모듈 파일이 클론된다. 더불어 이전에 서브모듈을 붙인적이 없었다면 작업 디렉토리에 .gitmodules라는 이름의 파일이 생겨난다. 아마도 이 파일은 다음과 같은 내용을 담고 있을 것이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[submodule &amp;quot;setup&amp;quot;]
    path = setup
    url = setup-repository-url
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;단순히 얘기하자면 현재 git 저장소의 서브모듈 정보를 담은 거라고 보면 된다. 이제부터 저 &lt;code&gt;setup&lt;/code&gt; 디렉토리에 클론된 내용은 별도의 git 저장소로 관리된다고 할 수 있다. 원본 저장소에서 작업을 하고 원격 저장소에 푸쉬해도 되고, 서브모듈 저장소에서 작업을 하고 원격 저장소에 푸쉬해도 된다는 얘기다. 만약 서브모듈 저장소에는 반영되지 않은 내용이 원격 저장소에 존재한다면? &lt;code&gt;git submodule update --remote --merge&lt;/code&gt; 명령어를 통해 해당 내용을 가져올 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;--merge&lt;/code&gt; 옵션이 없으면 최신 내용을 반영하고 헤드가 분리된다. branch 정보 자체가 바뀌지는 않는다고 할까...? 여튼 &lt;code&gt;--merge&lt;/code&gt;가 없다고 큰 문제가 발생하지는 않겠으나(당장 파일이 최신화된 상태니까), 되도록이면 &lt;code&gt;--merge&lt;/code&gt; 옵션을 붙이는 것을 추천한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2&quot;&gt;2. 프로젝트별로 다른 내용 적용하기&lt;/h2&gt;
&lt;p&gt;그런데 글 초반에 얘기했듯이 이 setup 저장소를 서브모듈로 붙이려고 하는 저장소는 A 하나가 아니다. B, C 프로젝트 저장소에도 적용해야 한다. 어려울건 없다. B와 C의 저장소 작업 디렉토리로 가서 위에서 했던 과정을 그대로 거치면 된다. 그런데 이쯤되니 하나 마음에 걸리는 게 있다. 저 위의 setup.sh 파일의 내용을 보면 다음과 같은 구절이 있지 않았나.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PROJECT_PATH={여기에 프로젝트 경로 입력}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그렇다. 사실은 이 setup파일에는 해당 프로젝트의 경로를 따로따로 입력해줘야 하는 문제가 있던 것이다. 물론 원격 저장소를 원본이라 생각하고 로컬 저장소에서만 PROJECT_PATH를 변경해주면 되겠거니 생각할 수 있겠으나, 원격 저장소의 최신 변경사항을 update할 때마다 다시 PROJECT_PATH를 수정해줘야 하니 정말 불편하기 짝이 없다.&lt;/p&gt;
&lt;p&gt;하지만 걱정 마라. 서브모듈 자체도 git 저장소이지 않은가? 프로젝트별로 branch를 따로 만들어서 관리를 해주는 방법이 있다. 예를 들어 A 프로젝트의 PROJECT_PATH에 A 프로젝트 경로를 넣은 것은 setup 저장소의 A 브랜치에, B 프로젝트의 PROJECT_PATH에 B 프로젝트 경로를 넣은 것은 B 브랜치에 적용하는 것이다. 이렇게 되면 적어도 원격 setup 저장소의 기본 브랜치상(예를 들어 main 브랜치)에서는 저 PROJECT_PATH 부분은 (아마도) 변경될 일이 없기 떄문에, 기본 브랜치에 변경사항이 생기면 A 혹은 B 등의 개별 프로젝트용 브랜치가 기본 브랜치를 병합하면 OK인 것이다. 프로젝트 환경설정 관리 이걸로 다 때려잡았다 생각도 든다.&lt;/p&gt;
&lt;h2 id=&quot;3submodule&quot;&gt;3. 프로젝트별로 submodule 기본 브랜치 설정하기&lt;/h2&gt;
&lt;p&gt;다만 여기서도 문제가 있다. 기본적으로 git submodule 명령어를 통해 서브모듈 업데이트를 하거나 새로이 init 하는 경우에는 자동적으로 기본 브랜치를 바라보게 된다. 열심히 A 브랜치를 만들어서 PROJECT_PATH 를 지정해놨더니, 지멋대로 기본 브랜치로 스위칭되면서 다시 A 브랜치로 변경되도록 해야 하는 귀찮은 일이 발생하는 것이다.&lt;br&gt;
하지만 이번에도 걱정 마라. 이것도 다 방법이 있다. 아까 맨 처음에 서브모듈을 붙였을 때 한 번 열어봤던 .gitmodules 파일을 기억하는가? 예를 열어서 한 줄만 더 추가하자. 바로 이렇게.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[submodule &amp;quot;setup&amp;quot;]
    path = setup
    url = setup-repository-url
    branch = A
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;저 위의 처음 내용과 차이가 느껴지는가? 바로 &amp;quot;branch = A&amp;quot; 라는 구문이 추가되었다. 이 구문을 추가함으로 인해 git submodule 명령어를 실행할 때 해당 프로젝트 저장소의 setup 서브모듈에 대한 기본 브랜치가 A로 고정되는 것이다. 각각의 프로젝트 저장소에서 비슷한 방법으로 처리하면 정말로 편하게 공통 환경설정 파일을 최신화해서 유지할 수 있다. 만약 github action등을 통해 setup의 원격 저장소의 기본 브랜치에 커밋이 발생할 때마다 각각의 별도 프로젝트용 브랜치에 백머지가 일어나게 한다면? 이때는 정말 거의 신경쓸게 없어지는 것과 다름이 없다. 굿굿!&lt;/p&gt;
&lt;!--kg-card-end: markdown--&gt;</content>
  </entry>
</feed>
